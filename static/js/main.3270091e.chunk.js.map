{"version":3,"sources":["types/ErrorMessages.ts","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/coments.ts","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","hooks/useClickoutside.ts","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorMessages","PostItem","posts","onSelectedPost","postId","map","post","id","title","className","type","classNames","onClick","PostsList","length","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","createNewComment","useState","isLoading","setIsLoading","isValidateError","setIsValidateError","emptyValue","name","email","formValue","setFormValue","handleChange","e","prevState","target","value","onSubmit","comment","preventDefault","catch","finally","htmlFor","placeholder","onChange","NameIsRequired","EmailIsRequired","TextIsRequired","CommentItem","onDeleteComment","href","PostDetails","selectedPost","isShowCommentForm","setIsShowCommentForm","commentsFromServer","setCommentsFromServer","isLoader","setIsLoader","isError","setIsError","handleDeleteComment","commentId","prevComments","filter","deleteComment","useEffect","Wrong","UserSelector","users","selectedUser","onSelectUser","initValue","isUsersVisible","setIsUsersVisible","domNode","useRef","maybeHandler","event","current","contains","document","addEventListener","removeEventListener","useClickOutside","handleToggleIsVisibleUsers","prev","ref","role","user","handleUserClick","App","usersFromServer","setUsersFromServer","postsFromServer","setPostsFromServer","setSelectedUser","isShowPostDetails","setIsShowPostDetails","setPostId","setSelectedPost","userId","UnableToLoadUsers","UnableToLoadPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3270091e.chunk.js","sourcesContent":["export enum ErrorMessages {\n  Wrong = 'Something went wrong',\n  UnableToLoadUsers = 'Unable to load users',\n  UnableToLoadPosts = 'Unable to load posts',\n  NameIsRequired = 'Name is required',\n  EmailIsRequired = 'Email is required',\n  TextIsRequired = 'Enter some text',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: Post) => void,\n  postId: number | null,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <tbody>\n      {posts.map((post: Post) => (\n        <tr\n          data-cy=\"Post\"\n          key={post.id}\n        >\n          <td data-cy=\"PostId\">\n            {post.id}\n          </td>\n\n          <td data-cy=\"PostTitle\">\n            {post.title}\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className={classNames('button is-link', {\n                'is-light': (post.id !== postId),\n              })}\n              onClick={() => onSelectedPost(post)}\n            >\n              {(post.id !== postId) ? (\n                'Open'\n              ) : (\n                'Close'\n              )}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: Post) => void,\n  postId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        {!!posts.length && (\n          <PostItem\n            posts={posts}\n            onSelectedPost={onSelectedPost}\n            postId={postId}\n          />\n        )}\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessages } from '../types/ErrorMessages';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/coments';\n\ntype Props = {\n  postId: number | undefined,\n  createNewComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  createNewComment,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isValidateError, setIsValidateError] = useState(false);\n  const emptyValue = '';\n\n  const [formValue, setFormValue] = useState<Partial<Comment>>({\n    name: emptyValue,\n    email: emptyValue,\n    body: emptyValue,\n  });\n\n  const { name, email, body } = formValue;\n\n  const handleChange = (e:React\n    .ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormValue((prevState) => {\n      return {\n        ...prevState,\n        [e.target.name]: e.target.value,\n      };\n    });\n  };\n\n  const handleClear = () => {\n    setFormValue(() => {\n      return {\n        name: emptyValue,\n        email: emptyValue,\n        body: emptyValue,\n      };\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!name || !email || !body) {\n      setIsValidateError(true);\n\n      return;\n    }\n\n    setIsValidateError(false);\n    setIsLoading(true);\n\n    addComment({ ...formValue, postId })\n      .then(createNewComment)\n      .catch()\n      .finally(() => {\n        setIsLoading(false);\n      });\n    setFormValue((prevState) => ({\n      ...prevState,\n      body: emptyValue,\n    }));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !name,\n            })}\n            value={name}\n            onChange={handleChange}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isValidateError && !name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.NameIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !email,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isValidateError && !email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.EmailIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isValidateError && !body,\n            })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {!body && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.TextIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Partial<Comment>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDeleteComment: (id: number) => void\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  onDeleteComment,\n}) => {\n  const {\n    id,\n    name,\n    email,\n    body,\n  } = comment;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={id}\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport { deleteComment, getComments } from '../api/coments';\nimport { ErrorMessages } from '../types/ErrorMessages';\n\ntype Props = {\n  selectedPost: Post,\n};\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [isShowCommentForm, setIsShowCommentForm] = useState<boolean>(false);\n  const [commentsFromServer, setCommentsFromServer] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const {\n    id,\n    title,\n    body,\n  } = selectedPost;\n\n  const handleDeleteComment = (commentId: number) => {\n    setCommentsFromServer((prevComments) => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId);\n  };\n\n  const handleAddNewComment = () => {\n    setIsShowCommentForm(true);\n  };\n\n  const handleCreateNewComment = (comment: Comment) => {\n    setCommentsFromServer((prevState) => {\n      return [...prevState, comment];\n    });\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoader(true);\n      getComments(id)\n        .then(setCommentsFromServer)\n        .then(() => {\n          setIsShowCommentForm(false);\n        })\n        .catch(() => {\n          setIsError(true);\n          setIsShowCommentForm(false);\n        })\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost && (\n              `#${id}: ${title}`\n            )}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost && (\n              body\n            )}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoader && !!commentsFromServer.length && !isError && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {ErrorMessages.Wrong}\n            </div>\n          )}\n\n          {!commentsFromServer.length && !isError ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {!!commentsFromServer.length && !isError && (\n            commentsFromServer.map((comment) => (\n              <CommentItem\n                comment={comment}\n                onDeleteComment={handleDeleteComment}\n                key={comment.id}\n              />\n            )))}\n\n          {!isShowCommentForm && !isError && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleAddNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isShowCommentForm && (\n          <NewCommentForm\n            postId={id}\n            createNewComment={handleCreateNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { useClickOutside } from '../hooks/useClickoutside';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  onSelectUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const { domNode, setIsUsersVisible, isUsersVisible } = useClickOutside(false);\n\n  const handleToggleIsVisibleUsers = () => {\n    setIsUsersVisible((prev) => !prev);\n  };\n\n  const handleUserClick = (user: User) => {\n    handleToggleIsVisibleUsers();\n    onSelectUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isUsersVisible,\n      })}\n      ref={domNode}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleIsVisibleUsers}\n        >\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersVisible && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users?.map((user: User) => {\n              return (\n                <a\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.name === user.name,\n                  })}\n                  key={user.id}\n                  onClick={() => handleUserClick(user)}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nexport const useClickOutside = (initValue: boolean) => {\n  const [isUsersVisible, setIsUsersVisible] = useState<boolean>(initValue);\n\n  const domNode = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const maybeHandler = (event: React.MouseEvent) => {\n      if (domNode.current && !domNode.current.contains(event.target as Node)) {\n        setIsUsersVisible(false);\n      }\n    };\n\n    document.addEventListener(\n      'mousedown', maybeHandler as unknown as EventListener,\n    );\n\n    return () => {\n      document.removeEventListener(\n        'mousedown', maybeHandler as unknown as EventListener,\n      );\n    };\n  }, []);\n\n  return { domNode, isUsersVisible, setIsUsersVisible };\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { ErrorMessages } from './types/ErrorMessages';\n\nexport const App: React.FC = () => {\n  const [usersFromServer, setUsersFromServer] = useState<User[]>([]);\n  const [postsFromServer, setPostsFromServer] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isShowPostDetails, setIsShowPostDetails] = useState<boolean>(false);\n  const [postId, setPostId] = useState<number | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const handleSelectedPost = (post: Post) => {\n    setSelectedPost(post);\n    if (postId !== post.id) {\n      setIsShowPostDetails(true);\n      setPostId(post.id);\n    } else {\n      setIsShowPostDetails(false);\n      setPostId(null);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsersFromServer)\n      .then(() => setIsError(false))\n      .catch(() => {\n        setIsError(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoader(true);\n      getPosts(selectedUser.id)\n        .then(setPostsFromServer)\n        .then(() => {\n          setIsShowPostDetails(false);\n          setPostId(null);\n          setIsError(false);\n        })\n        .catch(() => {\n          setIsError(true);\n        })\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={usersFromServer}\n                  selectedUser={selectedUser}\n                  onSelectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !!usersFromServer.length && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoader && !postsFromServer.length && (\n                  <Loader />\n                )}\n\n                {isError && !usersFromServer.length && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"UsersLoadingError\"\n                  >\n                    {ErrorMessages.UnableToLoadUsers}\n                  </div>\n                )}\n\n                {isError && !!usersFromServer.length\n                  && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      {ErrorMessages.UnableToLoadPosts}\n                    </div>\n                  )}\n\n                {!isError && selectedUser && (\n                  !postsFromServer.length && !isLoader ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList\n                      posts={postsFromServer}\n                      onSelectedPost={handleSelectedPost}\n                      postId={postId}\n                    />\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isShowPostDetails,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}