{"version":3,"sources":["types/ErrorMessages.ts","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/coments.ts","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","hooks/useClickoutside.ts","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorMessages","PostItem","posts","onSelectedPost","postId","map","post","id","title","className","type","classNames","onClick","PostsList","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","createNewComment","useState","isLoading","setIsLoading","isValidateError","setIsValidateError","name","email","formValue","setFormValue","handleChange","e","prevState","target","value","onSubmit","comment","preventDefault","length","catch","finally","htmlFor","placeholder","onChange","NameIsRequired","EmailIsRequired","TextIsRequired","CommentItem","onDeleteComment","href","PostDetails","selectedPost","isShowCommentForm","setIsShowCommentForm","commentsFromServer","setCommentsFromServer","isLoader","setIsLoader","isError","setIsError","handleDeleteComment","commentId","prevComments","filter","deleteComment","useEffect","UserSelector","users","selectedUser","setSelectedUser","initValue","isUsersVisible","setIsUsersVisible","domNode","useRef","maybeHandler","event","current","contains","document","addEventListener","removeEventListener","useClickOutside","handleToggleIsVisible","prev","ref","role","user","App","usersFromServer","setUsersFromServer","postsFromServer","setPostsFromServer","isShowPostDetails","setIsShowPostDetails","setPostId","useMemo","find","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.227a77d6.chunk.js","sourcesContent":["export enum ErrorMessages {\n  Wrong = 'Something went wrong!',\n  ErrorPosts = 'Posts is not loading',\n  NameIsRequired = 'Name is required',\n  EmailIsRequired = 'Email is required',\n  TextIsRequired = 'Enter some text',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: number) => void,\n  postId: number,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <tbody>\n      {posts.map((post: Post) => (\n        <tr\n          data-cy=\"Post\"\n          key={post.id}\n        >\n          <td data-cy=\"PostId\">\n            {post.id}\n          </td>\n\n          <td data-cy=\"PostTitle\">\n            {post.title}\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className={classNames('button is-link', {\n                'is-light': (post.id !== postId),\n              })}\n              onClick={() => {\n                onSelectedPost(post.id);\n              }}\n            >\n              {(post.id !== postId) ? (\n                'Open'\n              ) : (\n                'Close'\n              )}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: number) => void,\n  postId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <PostItem\n          posts={posts}\n          onSelectedPost={onSelectedPost}\n          postId={postId}\n        />\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessages } from '../types/ErrorMessages';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/coments';\n\ntype Props = {\n  postId: number | undefined,\n  createNewComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  createNewComment,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isValidateError, setIsValidateError] = useState(false);\n\n  const [formValue, setFormValue] = useState<Partial<Comment>>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const { name, email, body } = formValue;\n\n  const handleChange = (e:React\n    .ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormValue((prevState) => {\n      return {\n        ...prevState,\n        [e.target.name]: e.target.value,\n      };\n    });\n  };\n\n  const handleClear = () => {\n    setFormValue(() => {\n      return {\n        name: '',\n        email: '',\n        body: '',\n      };\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (name?.length === 0 || email?.length === 0 || body?.length === 0) {\n      setIsValidateError(true);\n\n      return;\n    }\n\n    setIsValidateError(false);\n    setIsLoading(true);\n\n    addComment({ ...formValue, postId })\n      .then(createNewComment)\n      .catch()\n      .finally(() => {\n        setIsLoading(false);\n      });\n    setFormValue((prevState) => ({\n      ...prevState,\n      body: '',\n    }));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !name,\n            })}\n            value={name}\n            onChange={handleChange}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isValidateError && !name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.NameIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !email,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isValidateError && !email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.EmailIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isValidateError && !body,\n            })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {!body && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.TextIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Partial<Comment>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDeleteComment: (id: number) => void\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  onDeleteComment,\n}) => {\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={comment.id}\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport { deleteComment, getComments } from '../api/coments';\n\ntype Props = {\n  selectedPost: Post | undefined,\n};\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [isShowCommentForm, setIsShowCommentForm] = useState<boolean>(false);\n  const [commentsFromServer, setCommentsFromServer] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleDeleteComment = (commentId: number) => {\n    setCommentsFromServer((prevComments) => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId);\n  };\n\n  const handleAddNewComment = () => {\n    setIsShowCommentForm(true);\n  };\n\n  const handleCreateNewComment = (comment: Comment) => {\n    setCommentsFromServer((prevState) => {\n      return [...prevState, comment];\n    });\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoader(true);\n      getComments(selectedPost.id)\n        .then(setCommentsFromServer)\n        .catch(() => {\n          setIsError(true);\n        })\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost && (\n              `#${selectedPost.id}: ${selectedPost.title}`\n            )}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost && (\n              selectedPost.body\n            )}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoader && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!commentsFromServer.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n          {!!commentsFromServer.length && (\n            commentsFromServer.map((comment) => (\n              <CommentItem\n                comment={comment}\n                onDeleteComment={handleDeleteComment}\n              />\n            )))}\n\n          {!isShowCommentForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleAddNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isShowCommentForm && (\n          <NewCommentForm\n            postId={selectedPost?.id}\n            createNewComment={handleCreateNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { useClickOutside } from '../hooks/useClickoutside';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  // const [isShowUsers, setIsShowUsers] = useState(false);\n  // const isActiveUser = selectedUser.name ===\n  // useEffect(() => {\n  //   console.log(ref.current);\n  // });\n  const { domNode, setIsUsersVisible, isUsersVisible } = useClickOutside(false);\n\n  const handleToggleIsVisible = () => {\n    setIsUsersVisible((prev) => !prev);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isUsersVisible,\n      })}\n      ref={domNode}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleIsVisible}\n        >\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersVisible && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users?.map((user: User) => {\n              return (\n                <a\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.name === user.name,\n                  })}\n                  key={user.id}\n                  onClick={() => {\n                    setSelectedUser(user);\n                    handleToggleIsVisible();\n                  }}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nexport const useClickOutside = (initValue: boolean) => {\n  const [isUsersVisible, setIsUsersVisible] = useState<boolean>(initValue);\n\n  const domNode = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const maybeHandler = (event: React.MouseEvent) => {\n      if (domNode.current && !domNode.current.contains(event.target as Node)) {\n        setIsUsersVisible(false);\n      }\n    };\n\n    document.addEventListener(\n      'mousedown', maybeHandler as unknown as EventListener,\n    );\n\n    return () => {\n      document.removeEventListener(\n        'mousedown', maybeHandler as unknown as EventListener,\n      );\n    };\n  }, []);\n\n  return { domNode, isUsersVisible, setIsUsersVisible };\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [usersFromServer, setUsersFromServer] = useState<User[] | null>([]);\n  const [postsFromServer, setPostsFromServer] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoader, setIsLoader] = useState(false);\n\n  // const [isErrorMessage, setIsErrorMessage] = useState(false);\n  // const [errorMessageName, setErrorMessageName] = useState<string | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  const [isShowPostDetails, setIsShowPostDetails] = useState<boolean>(false);\n  const [postId, setPostId] = useState<number>(0);\n\n  const selectedPost = useMemo(() => postsFromServer\n    .find((post) => post.id === postId),\n  [postId]);\n\n  const handleSelectedPost = (id: number) => {\n    if (postId !== id) {\n      setIsShowPostDetails(true);\n      setPostId(id);\n    } else {\n      setIsShowPostDetails(false);\n      setPostId(0);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsersFromServer);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoader(true);\n      getPosts(selectedUser.id)\n        .then(setPostsFromServer)\n        .then(() => {\n          setIsShowPostDetails(false);\n          setPostId(0);\n        })\n        .catch(() => {\n          setIsError(true);\n        })\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={usersFromServer}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoader && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    `Unable to load posts`\n                  </div>\n                )}\n                {selectedUser && (\n                  !postsFromServer.length ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList\n                      posts={postsFromServer}\n                      onSelectedPost={handleSelectedPost}\n                      postId={postId}\n                    />\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isShowPostDetails,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}