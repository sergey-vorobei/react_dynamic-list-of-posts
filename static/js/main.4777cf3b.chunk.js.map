{"version":3,"sources":["types/ErrorMessages.ts","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/coments.ts","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","hooks/useClickoutside.ts","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorMessages","PostItem","posts","onSelectedPost","postId","map","post","id","title","className","type","classNames","onClick","PostsList","length","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","createNewComment","useState","isLoading","setIsLoading","isErrorAddNewComment","setIsErrorAddNewComment","isValidateError","setIsValidateError","emptyValue","name","email","formValue","setFormValue","checkForm","trim","handleChange","e","target","inputName","value","isSingleWord","test","prevState","onSubmit","comment","preventDefault","catch","finally","Wrong","htmlFor","placeholder","onChange","NameIsRequired","EmailIsRequired","TextIsRequired","CommentItem","onDeleteComment","href","PostDetails","selectedPost","isShowCommentForm","setIsShowCommentForm","commentsFromServer","setCommentsFromServer","isLoader","setIsLoader","isError","setIsError","handleDeleteComment","commentId","prevComments","filter","deleteComment","useEffect","res","UserSelector","users","selectedUser","onSelectUser","initValue","isUsersVisible","setIsUsersVisible","domNode","useRef","maybeHandler","event","current","contains","document","addEventListener","removeEventListener","useClickOutside","handleToggleIsVisibleUsers","prev","ref","role","user","handleUserClick","App","usersFromServer","setUsersFromServer","postsFromServer","setPostsFromServer","setSelectedUser","isShowPostDetails","setIsShowPostDetails","setPostId","setSelectedPost","userId","UnableToLoadUsers","UnableToLoadPosts","ReactDOM","render","getElementById"],"mappings":"sMAAYA,E,yECUCC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,OAEA,OACE,gCACGF,EAAMG,KAAI,SAACC,GACV,IACEC,EAEED,EAFFC,GACAC,EACEF,EADFE,MAGF,OACE,qBACE,UAAQ,OADV,UAIE,oBAAI,UAAQ,SAAZ,SACGD,IAGH,oBAAI,UAAQ,YAAZ,SACGC,IAGH,oBAAIC,UAAU,8BAAd,SACE,wBACEC,KAAK,SACL,UAAQ,aACRD,UAAWE,IAAW,iBAAkB,CACtC,WAAaL,EAAKC,KAAOH,IAE3BQ,QAAS,kBAAMT,EAAeG,IANhC,SAQIA,EAAKC,KAAOH,EACZ,OAEA,cAtBDG,SChBJM,EAA6B,SAAC,GAIpC,IAHLX,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,OAEA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGK,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,0CAIDP,EAAMY,QACP,cAAC,EAAD,CACEZ,MAAOA,EACPC,eAAgBA,EAChBC,OAAQA,W,QC9BPW,G,MAAS,kBACpB,qBAAKN,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,wBHJPT,K,6BAAAA,E,yCAAAA,E,yCAAAA,E,kCAAAA,E,oCAAAA,E,kCAAAA,M,KIAZ,IAAMgB,EAAW,oCAEjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAMxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAS/B,OAPIC,IACFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAIbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,UAIf,IAAMC,EACN,SAAId,GAAJ,OAAoBD,EAAWC,IADzBc,EAEL,SAAId,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDY,EAIH,SAACd,GAAD,OAAiBD,EAAQC,EAAK,WC5B3Be,EAAkC,SAAC,GAGzC,IAFLlC,EAEI,EAFJA,OACAmC,EACI,EADJA,iBAEA,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwDF,oBAAS,GAAjE,mBAAOG,EAAP,KAA6BC,EAA7B,KACA,EAA8CJ,oBAAS,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACMC,EAAa,GAEnB,EAAkCP,mBAA2B,CAC3DQ,KAAMD,EACNE,MAAOF,EACPpB,KAAMoB,IAHR,mBAAOG,EAAP,KAAkBC,EAAlB,KAMQH,EAAsBE,EAAtBF,KAAMC,EAAgBC,EAAhBD,MAAOtB,EAASuB,EAATvB,KAEfyB,EAAqC,KAApB,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMK,OAAOvC,SACF,KAApB,OAALmC,QAAK,IAALA,OAAA,EAAAA,EAAOI,OAAOvC,SACU,KAApB,OAAJa,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,OAAOvC,QAGZwC,EAAe,SAACC,GAEpB,MAAmCA,EAAEC,OAAvBC,EAAd,EAAQT,KAAiBU,EAAzB,EAAyBA,MAEnBC,EAAe,QAAQC,KAAKF,GAGhCP,EADEQ,EACW,SAACE,GACZ,OAAO,2BACFA,GADL,kBAEGJ,EAAYC,EAAML,UAIV,SAACQ,GACZ,OAAO,2BACFA,GADL,kBAEGJ,EAAYC,OA6CrB,OACE,uBAAM,UAAQ,iBAAiBI,SA7BZ,SAACP,GCxDE,IAACQ,EDyDvBR,EAAES,iBAEGZ,GAGHV,GAAa,GACbI,GAAmB,IC/DEiB,EDiEV,2BAAKb,GAAN,IAAiB9C,WChExBiC,EAAqB,YAAa0B,IDiElChC,KAAKQ,GACLR,MAAK,WACJa,GAAwB,MAEzBqB,OAAM,WACLrB,GAAwB,MAEzBsB,SAAQ,WACPxB,GAAa,MAGjBS,GAAa,SAACU,GAAD,mBAAC,eACTA,GADQ,IAEXlC,KAAMoB,QAnBRD,GAAmB,IAyBrB,UACE,sBAAKrC,UAAU,QAAQ,UAAQ,YAA/B,UAEGkC,GACC,qBAAKlC,UAAU,yBAAyB,UAAQ,gBAAhD,SACGT,EAAcmE,QAGnB,uBAAO1D,UAAU,QAAQ2D,QAAQ,sBAAjC,yBAIA,sBAAK3D,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLsC,KAAK,OACLzC,GAAG,sBACH8D,YAAY,eACZ5D,UAAWE,IAAW,QAAS,CAC7B,YAAakC,IAAoBG,IAEnCU,MAAOV,EACPsB,SAAUhB,IAEZ,sBAAM7C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdoC,IAAoBG,GACnB,sBACEvC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,sCAKjBuC,GAAQH,GACR,mBAAGpC,UAAU,iBAAiB,UAAQ,eAAtC,SACGT,EAAcuE,oBAKrB,sBAAK9D,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ2D,QAAQ,uBAAjC,0BAIA,sBAAK3D,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLsC,KAAK,QACLzC,GAAG,uBACH8D,YAAY,iBACZ5D,UAAWE,IAAW,QAAS,CAC7B,YAAakC,IAAoBI,IAEnCS,MAAOT,EACPqB,SAAUhB,IAGZ,sBAAM7C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGboC,IAAoBI,GACpB,sBACExC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBoC,IAAoBI,GACnB,mBAAGxC,UAAU,iBAAiB,UAAQ,eAAtC,SACGT,EAAcwE,qBAKrB,sBAAK/D,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ2D,QAAQ,eAAjC,0BAIA,qBAAK3D,UAAU,UAAf,SACE,0BACEF,GAAG,eACHyC,KAAK,OACLqB,YAAY,oBACZ5D,UAAWE,IAAW,WAAY,CAChC,aAAcyC,GAAaP,IAAoBlB,IAEjD+B,MAAO/B,EACP2C,SAAUhB,MAIbT,IAAoBlB,GACnB,mBAAGlB,UAAU,iBAAiB,UAAQ,eAAtC,SACGT,EAAcyE,oBAKrB,sBAAKhE,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,aAAc8B,IAHlB,mBAUF,qBAAKhC,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAU,0BACVG,QArKU,WAClBkC,GAAmB,GACnBK,GAAa,WACX,MAAO,CACLH,KAAMD,EACNE,MAAOF,EACPpB,KAAMoB,OA4JJ,4BElNG2B,EAA+B,SAAC,GAGtC,IAFLX,EAEI,EAFJA,QACAY,EACI,EADJA,gBAGEpE,EAIEwD,EAJFxD,GACAyC,EAGEe,EAHFf,KACAC,EAEEc,EAFFd,MACAtB,EACEoC,EADFpC,KAGF,OACE,0BACElB,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGmE,KAAI,iBAAY3B,GAAS,UAAQ,gBAApC,SACGD,IAEH,wBACE,UAAQ,gBACRtC,KAAK,SACLD,UAAU,kBACV,aAAW,SACXG,QAAS,kBAAM+D,EAAgBpE,IALjC,8BAWF,qBAAKE,UAAU,eAAe,UAAQ,cAAtC,SACGkB,MAlBEpB,ICXEsE,EAA+B,SAAC,GAEtC,IADLC,EACI,EADJA,aAEA,EAAkDtC,oBAAkB,GAApE,mBAAOuC,EAAP,KAA0BC,EAA1B,KACA,EAAoDxC,mBAAoB,IAAxE,mBAAOyC,EAAP,KAA2BC,EAA3B,KACA,EAAgC1C,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAA8B5C,oBAAS,GAAvC,mBAAO6C,EAAP,KAAgBC,EAAhB,KAEE/E,EAGEuE,EAHFvE,GACAC,EAEEsE,EAFFtE,MACAmB,EACEmD,EADFnD,KAGI4D,EAAsB,SAACC,GAC3BN,GAAsB,SAACO,GAAD,OAAkBA,EACrCC,QAAO,SAAA3B,GAAO,OAAIA,EAAQxD,KAAOiF,QFpBX,SAACA,GACrBnD,EAAA,oBAA2BmD,IEqBhCG,CAAcH,IAgChB,OAnBAI,qBAAU,WFvCe,IAACxF,EEwCpB0E,IACFM,GAAY,IFzCUhF,EE0CVG,EFzCT8B,EAAA,2BAA0CjC,KE0C1C2B,MAAK,SAAC8D,GACLX,EAAsBW,MAEvB5B,OAAM,WACLmB,GAAY,GACZE,GAAW,GACXN,GAAqB,MAEtBd,SAAQ,WACPkB,GAAY,GACZE,GAAW,SAGhB,CAACR,IAGF,qBAAKrE,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,SACGqE,GAAY,WACPvE,EADO,aACAC,KAIf,mBAAG,UAAQ,WAAX,SACGsE,GACCnD,OAKN,qBAAKlB,UAAU,QAAf,SACG0E,EACC,cAAC,EAAD,IAEA,qCACGE,GACC,qBAAK5E,UAAU,yBAAyB,UAAQ,gBAAhD,SACGT,EAAcmE,QAIjBc,EAAmBnE,QAAWuE,EAK9B,mBAAG5E,UAAU,aAAb,uBAJA,mBAAGA,UAAU,aAAa,UAAQ,oBAAlC,+BASCwE,EAAmBnE,SAAWuE,GAC/BJ,EAAmB5E,KAAI,SAAC0D,GAAD,OACrB,cAAC,EAAD,CACEA,QAASA,EACTY,gBAAiBY,GACZxB,EAAQxD,QAIjBwE,IAAsBM,GACtB,wBACE,UAAQ,qBACR3E,KAAK,SACLD,UAAU,iBACVG,QAjFY,WAC1BoE,GAAqB,IA4ET,kCAYPD,GACC,cAAC,EAAD,CACE3E,OAAQG,EACRgC,iBAxFqB,SAACwB,GAC9BmB,GAAsB,SAACrB,GACrB,MAAM,GAAN,mBAAWA,GAAX,CAAsBE,gBC3Bf+B,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,ECd6B,SAACC,GAC9B,MAA4C1D,mBAAkB0D,GAA9D,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAUC,iBAAuB,MAoBvC,OAlBAV,qBAAU,WACR,IAAMW,EAAe,SAACC,GAChBH,EAAQI,UAAYJ,EAAQI,QAAQC,SAASF,EAAMhD,SACrD4C,GAAkB,IAQtB,OAJAO,SAASC,iBACP,YAAaL,GAGR,WACLI,SAASE,oBACP,YAAaN,MAGhB,IAEI,CAAEF,UAASF,iBAAgBC,qBDTqBU,EAAgB,GAA/DT,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,kBAAmBD,EAApC,EAAoCA,eAE9BY,EAA6B,WACjCX,GAAkB,SAACY,GAAD,OAAWA,MAQ/B,OACE,sBACE,UAAQ,eACRvG,UAAWE,IAAW,WAAY,CAChC,YAAawF,IAEfc,IAAKZ,EALP,UAOE,qBAAK5F,UAAU,mBAAf,SACE,yBACEC,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdG,QAASmG,EALX,UAOE,+BACIf,EAGAA,EAAahD,KAFb,kBAMJ,sBAAMvC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlD0F,GACC,qBACE1F,UAAU,gBACVF,GAAG,gBACH2G,KAAK,OAHP,SAKE,qBAAKzG,UAAU,mBAAf,gBACGsF,QADH,IACGA,OADH,EACGA,EAAO1F,KAAI,SAAC8G,GACX,OACE,mBACEvC,KAAI,gBAAWuC,EAAK5G,IACpBE,UAAWE,IAAW,gBAAiB,CACrC,aAAyB,OAAZqF,QAAY,IAAZA,OAAA,EAAAA,EAAchD,QAASmE,EAAKnE,OAG3CpC,QAAS,kBAlDD,SAACuG,GACvBJ,IACAd,EAAakB,GAgDgBC,CAAgBD,IANjC,SAQGA,EAAKnE,MAHDmE,EAAK5G,eEvDf8G,EAAgB,WAC3B,MAA8C7E,mBAAiB,IAA/D,mBAAO8E,EAAP,KAAwBC,EAAxB,KACA,EAA8C/E,mBAAiB,IAA/D,mBAAOgF,EAAP,KAAwBC,EAAxB,KACA,EAAwCjF,mBAAsB,MAA9D,mBAAOwD,EAAP,KAAqB0B,EAArB,KACA,EAAgClF,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAA8B5C,oBAAS,GAAvC,mBAAO6C,EAAP,KAAgBC,EAAhB,KACA,EAAkD9C,oBAAkB,GAApE,mBAAOmF,EAAP,KAA0BC,EAA1B,KACA,EAA4BpF,mBAAwB,MAApD,mBAAOpC,EAAP,KAAeyH,EAAf,KACA,EAAwCrF,mBAAsB,MAA9D,mBAAOsC,EAAP,KAAqBgD,EAArB,KA6CA,OA5BAlC,qBAAU,WCrCHvD,EAAmB,UDuCrBN,KAAKwF,GACLxF,MAAK,kBAAMuD,GAAW,MACtBrB,OAAM,WACLqB,GAAW,QAEd,IAEHM,qBAAU,WE/CY,IAACmC,EFgDjB/B,IACFZ,GAAY,IEjDO2C,EFkDV/B,EAAazF,GEjDnB8B,EAAA,wBAAoC0F,KFkDpChG,KAAK0F,GACL1F,MAAK,WACJ6F,GAAqB,GACrBC,EAAU,MACVvC,GAAW,MAEZrB,OAAM,WACLqB,GAAW,MAEZpB,SAAQ,WACPkB,GAAY,SAGjB,CAACY,IAGF,sBAAMvF,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEsF,MAAOuB,EACPtB,aAAcA,EACdC,aA1CS,SAACkB,GACxBO,EAAgBP,QA6CN,sBAAK1G,UAAU,QAAQ,UAAQ,cAA/B,WACIuF,KAAkBsB,EAAgBxG,QAClC,mBAAG,UAAQ,iBAAX,8BAKDqE,EACC,cAAC,EAAD,IAEA,qCACGE,IAAYiC,EAAgBxG,QAC3B,qBACEL,UAAU,yBACV,UAAQ,oBAFV,SAIGT,EAAcgI,oBAIlB3C,KAAaiC,EAAgBxG,QAE1B,qBACEL,UAAU,yBACV,UAAQ,oBAFV,SAIGT,EAAciI,qBAInB5C,GAAWW,IACVwB,EAAgB1G,QAAWqE,EAQ1B,cAAC,EAAD,CACEjF,MAAOsH,EACPrH,eAlGG,SAACG,GAC1BwH,EAAgBxH,GACZF,IAAWE,EAAKC,IAClBqH,GAAqB,GACrBC,EAAUvH,EAAKC,MAEfqH,GAAqB,GACrBC,EAAU,QA4FUzH,OAAQA,IAVV,qBACEK,UAAU,0BACV,UAAQ,aAFV,sCAoBd,qBACE,UAAQ,UACRA,UAAWE,IACT,OACA,YACA,eACA,UACA,CACE,gBAAiBgH,IARvB,SAYE,qBAAKlH,UAAU,gCAAf,SACGqE,GACC,cAAC,EAAD,CACEA,aAAcA,gBGlJhCoD,IAASC,OACP,cAAC,EAAD,IACAxB,SAASyB,eAAe,W","file":"static/js/main.4777cf3b.chunk.js","sourcesContent":["export enum ErrorMessages {\n  Wrong = 'Something went wrong',\n  UnableToLoadUsers = 'Unable to load users',\n  UnableToLoadPosts = 'Unable to load posts',\n  NameIsRequired = 'Name is required',\n  EmailIsRequired = 'Email is required',\n  TextIsRequired = 'Enter some text',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: Post) => void,\n  postId: number | null,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <tbody>\n      {posts.map((post: Post) => {\n        const {\n          id,\n          title,\n        } = post;\n\n        return (\n          <tr\n            data-cy=\"Post\"\n            key={id}\n          >\n            <td data-cy=\"PostId\">\n              {id}\n            </td>\n\n            <td data-cy=\"PostTitle\">\n              {title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button is-link', {\n                  'is-light': (post.id !== postId),\n                })}\n                onClick={() => onSelectedPost(post)}\n              >\n                {(post.id !== postId) ? (\n                  'Open'\n                ) : (\n                  'Close'\n                )}\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  onSelectedPost: (post: Post) => void,\n  postId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectedPost,\n  postId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        {!!posts.length && (\n          <PostItem\n            posts={posts}\n            onSelectedPost={onSelectedPost}\n            postId={postId}\n          />\n        )}\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessages } from '../types/ErrorMessages';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/coments';\n\ntype Props = {\n  postId: number | undefined,\n  createNewComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  createNewComment,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorAddNewComment, setIsErrorAddNewComment] = useState(false);\n  const [isValidateError, setIsValidateError] = useState(false);\n  const emptyValue = '';\n\n  const [formValue, setFormValue] = useState<Partial<Comment>>({\n    name: emptyValue,\n    email: emptyValue,\n    body: emptyValue,\n  });\n\n  const { name, email, body } = formValue;\n\n  const checkForm = (name?.trim().length !== 0\n    && email?.trim().length !== 0\n    && body?.trim().length !== 0\n  );\n\n  const handleChange = (e:React\n    .ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name: inputName, value } = e.target;\n\n    const isSingleWord = /^\\S+$/.test(value);\n\n    if (isSingleWord) {\n      setFormValue((prevState) => {\n        return {\n          ...prevState,\n          [inputName]: value.trim(),\n        };\n      });\n    } else {\n      setFormValue((prevState) => {\n        return {\n          ...prevState,\n          [inputName]: value,\n        };\n      });\n    }\n  };\n\n  const handleClear = () => {\n    setIsValidateError(false);\n    setFormValue(() => {\n      return {\n        name: emptyValue,\n        email: emptyValue,\n        body: emptyValue,\n      };\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!checkForm) {\n      setIsValidateError(true);\n    } else {\n      setIsLoading(true);\n      setIsValidateError(false);\n\n      addComment({ ...formValue, postId })\n        .then(createNewComment)\n        .then(() => {\n          setIsErrorAddNewComment(false);\n        })\n        .catch(() => {\n          setIsErrorAddNewComment(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n\n      setFormValue((prevState) => ({\n        ...prevState,\n        body: emptyValue,\n      }));\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n\n        {isErrorAddNewComment && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            {ErrorMessages.Wrong}\n          </div>\n        )}\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !name,\n            })}\n            value={name}\n            onChange={handleChange}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isValidateError && !name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && isValidateError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.NameIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isValidateError && !email,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          { isValidateError && !email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isValidateError && !email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.EmailIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !checkForm && isValidateError && !body,\n            })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {isValidateError && !body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.TextIsRequired}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Partial<Comment>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDeleteComment: (id: number) => void\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  onDeleteComment,\n}) => {\n  const {\n    id,\n    name,\n    email,\n    body,\n  } = comment;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={id}\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport { deleteComment, getComments } from '../api/coments';\nimport { ErrorMessages } from '../types/ErrorMessages';\n\ntype Props = {\n  selectedPost: Post,\n};\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [isShowCommentForm, setIsShowCommentForm] = useState<boolean>(false);\n  const [commentsFromServer, setCommentsFromServer] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const {\n    id,\n    title,\n    body,\n  } = selectedPost;\n\n  const handleDeleteComment = (commentId: number) => {\n    setCommentsFromServer((prevComments) => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId);\n  };\n\n  const handleAddNewComment = () => {\n    setIsShowCommentForm(true);\n  };\n\n  const handleCreateNewComment = (comment: Comment) => {\n    setCommentsFromServer((prevState) => {\n      return [...prevState, comment];\n    });\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoader(true);\n      getComments(id)\n        .then((res) => {\n          setCommentsFromServer(res);\n        })\n        .catch(() => {\n          setIsLoader(false);\n          setIsError(true);\n          setIsShowCommentForm(false);\n        })\n        .finally(() => {\n          setIsLoader(false);\n          setIsError(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost && (\n              `#${id}: ${title}`\n            )}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost && (\n              body\n            )}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoader ? (\n            <Loader />\n          ) : (\n            <>\n              {isError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  {ErrorMessages.Wrong}\n                </div>\n              )}\n\n              {!commentsFromServer.length && !isError ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <p className=\"title is-4\">\n                  Comments:\n                </p>\n              )}\n\n              {!!commentsFromServer.length && !isError && (\n                commentsFromServer.map((comment) => (\n                  <CommentItem\n                    comment={comment}\n                    onDeleteComment={handleDeleteComment}\n                    key={comment.id}\n                  />\n                )))}\n\n              {!isShowCommentForm && !isError && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleAddNewComment}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n        {isShowCommentForm && (\n          <NewCommentForm\n            postId={id}\n            createNewComment={handleCreateNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { useClickOutside } from '../hooks/useClickoutside';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  onSelectUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const { domNode, setIsUsersVisible, isUsersVisible } = useClickOutside(false);\n\n  const handleToggleIsVisibleUsers = () => {\n    setIsUsersVisible((prev) => !prev);\n  };\n\n  const handleUserClick = (user: User) => {\n    handleToggleIsVisibleUsers();\n    onSelectUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isUsersVisible,\n      })}\n      ref={domNode}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleIsVisibleUsers}\n        >\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersVisible && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users?.map((user: User) => {\n              return (\n                <a\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.name === user.name,\n                  })}\n                  key={user.id}\n                  onClick={() => handleUserClick(user)}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nexport const useClickOutside = (initValue: boolean) => {\n  const [isUsersVisible, setIsUsersVisible] = useState<boolean>(initValue);\n\n  const domNode = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const maybeHandler = (event: React.MouseEvent) => {\n      if (domNode.current && !domNode.current.contains(event.target as Node)) {\n        setIsUsersVisible(false);\n      }\n    };\n\n    document.addEventListener(\n      'mousedown', maybeHandler as unknown as EventListener,\n    );\n\n    return () => {\n      document.removeEventListener(\n        'mousedown', maybeHandler as unknown as EventListener,\n      );\n    };\n  }, []);\n\n  return { domNode, isUsersVisible, setIsUsersVisible };\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { ErrorMessages } from './types/ErrorMessages';\n\nexport const App: React.FC = () => {\n  const [usersFromServer, setUsersFromServer] = useState<User[]>([]);\n  const [postsFromServer, setPostsFromServer] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isShowPostDetails, setIsShowPostDetails] = useState<boolean>(false);\n  const [postId, setPostId] = useState<number | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const handleSelectedPost = (post: Post) => {\n    setSelectedPost(post);\n    if (postId !== post.id) {\n      setIsShowPostDetails(true);\n      setPostId(post.id);\n    } else {\n      setIsShowPostDetails(false);\n      setPostId(null);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsersFromServer)\n      .then(() => setIsError(false))\n      .catch(() => {\n        setIsError(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoader(true);\n      getPosts(selectedUser.id)\n        .then(setPostsFromServer)\n        .then(() => {\n          setIsShowPostDetails(false);\n          setPostId(null);\n          setIsError(false);\n        })\n        .catch(() => {\n          setIsError(true);\n        })\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={usersFromServer}\n                  selectedUser={selectedUser}\n                  onSelectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !!usersFromServer.length && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoader ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {isError && !usersFromServer.length && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"UsersLoadingError\"\n                      >\n                        {ErrorMessages.UnableToLoadUsers}\n                      </div>\n                    )}\n\n                    {isError && !!usersFromServer.length\n                      && (\n                        <div\n                          className=\"notification is-danger\"\n                          data-cy=\"PostsLoadingError\"\n                        >\n                          {ErrorMessages.UnableToLoadPosts}\n                        </div>\n                      )}\n\n                    {!isError && selectedUser && (\n                      !postsFromServer.length && !isLoader ? (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      ) : (\n                        <PostsList\n                          posts={postsFromServer}\n                          onSelectedPost={handleSelectedPost}\n                          postId={postId}\n                        />\n                      )\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isShowPostDetails,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}